{"ast":null,"code":"require(\"dotenv\").config();\n\nconst key = process.env.REACT_APP_PINATA_KEY;\nconst secret = process.env.REACT_APP_PINATA_SECRET;\n\nconst axios = require(\"axios\");\n\nconst FormData = require(\"form-data\");\n\nexport const uploadJSONToIPFS = async JSONBody => {\n  const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`; //making axios POST request to Pinata ⬇️\n\n  return axios.post(url, JSONBody, {\n    headers: {\n      pinata_api_key: key,\n      pinata_secret_api_key: secret\n    }\n  }).then(function (response) {\n    return {\n      success: true,\n      pinataURL: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\n    };\n  }).catch(function (error) {\n    console.log(error);\n    return {\n      success: false,\n      message: error.message\n    };\n  });\n};\nexport const uploadFileToIPFS = async file => {\n  const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`; //making axios POST request to Pinata ⬇️\n\n  let data = new FormData();\n  data.append(\"file\", file);\n  const metadata = JSON.stringify({\n    name: \"testname\",\n    keyvalues: {\n      exampleKey: \"exampleValue\"\n    }\n  });\n  data.append(\"pinataMetadata\", metadata); //pinataOptions are optional\n\n  const pinataOptions = JSON.stringify({\n    cidVersion: 0,\n    customPinPolicy: {\n      regions: [{\n        id: \"FRA1\",\n        desiredReplicationCount: 1\n      }, {\n        id: \"NYC1\",\n        desiredReplicationCount: 2\n      }]\n    }\n  });\n  data.append(\"pinataOptions\", pinataOptions);\n  return axios.post(url, data, {\n    maxBodyLength: \"Infinity\",\n    headers: {\n      \"Content-Type\": `multipart/form-data; boundary=${data._boundary}`,\n      pinata_api_key: key,\n      pinata_secret_api_key: secret\n    }\n  }).then(function (response) {\n    console.log(\"image uploaded\", response.data.IpfsHash);\n    return {\n      success: true,\n      pinataURL: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\n    };\n  }).catch(function (error) {\n    console.log(error);\n    return {\n      success: false,\n      message: error.message\n    };\n  });\n};","map":{"version":3,"names":["require","config","key","process","env","REACT_APP_PINATA_KEY","secret","REACT_APP_PINATA_SECRET","axios","FormData","uploadJSONToIPFS","JSONBody","url","post","headers","pinata_api_key","pinata_secret_api_key","then","response","success","pinataURL","data","IpfsHash","catch","error","console","log","message","uploadFileToIPFS","file","append","metadata","JSON","stringify","name","keyvalues","exampleKey","pinataOptions","cidVersion","customPinPolicy","regions","id","desiredReplicationCount","maxBodyLength","_boundary"],"sources":["/Users/vanshkapoor/Desktop/NFT_Marketplace/src/pinata.js"],"sourcesContent":["require(\"dotenv\").config();\nconst key = process.env.REACT_APP_PINATA_KEY;\nconst secret = process.env.REACT_APP_PINATA_SECRET;\n\nconst axios = require(\"axios\");\nconst FormData = require(\"form-data\");\n\nexport const uploadJSONToIPFS = async (JSONBody) => {\n  const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\n  //making axios POST request to Pinata ⬇️\n  return axios\n    .post(url, JSONBody, {\n      headers: {\n        pinata_api_key: key,\n        pinata_secret_api_key: secret,\n      },\n    })\n    .then(function (response) {\n      return {\n        success: true,\n        pinataURL:\n          \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash,\n      };\n    })\n    .catch(function (error) {\n      console.log(error);\n      return {\n        success: false,\n        message: error.message,\n      };\n    });\n};\n\nexport const uploadFileToIPFS = async (file) => {\n  const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\n  //making axios POST request to Pinata ⬇️\n\n  let data = new FormData();\n  data.append(\"file\", file);\n\n  const metadata = JSON.stringify({\n    name: \"testname\",\n    keyvalues: {\n      exampleKey: \"exampleValue\",\n    },\n  });\n  data.append(\"pinataMetadata\", metadata);\n\n  //pinataOptions are optional\n  const pinataOptions = JSON.stringify({\n    cidVersion: 0,\n    customPinPolicy: {\n      regions: [\n        {\n          id: \"FRA1\",\n          desiredReplicationCount: 1,\n        },\n        {\n          id: \"NYC1\",\n          desiredReplicationCount: 2,\n        },\n      ],\n    },\n  });\n  data.append(\"pinataOptions\", pinataOptions);\n\n  return axios\n    .post(url, data, {\n      maxBodyLength: \"Infinity\",\n      headers: {\n        \"Content-Type\": `multipart/form-data; boundary=${data._boundary}`,\n        pinata_api_key: key,\n        pinata_secret_api_key: secret,\n      },\n    })\n    .then(function (response) {\n      console.log(\"image uploaded\", response.data.IpfsHash);\n      return {\n        success: true,\n        pinataURL:\n          \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash,\n      };\n    })\n    .catch(function (error) {\n      console.log(error);\n      return {\n        success: false,\n        message: error.message,\n      };\n    });\n};\n"],"mappings":"AAAAA,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AACA,MAAMC,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,oBAAxB;AACA,MAAMC,MAAM,GAAGH,OAAO,CAACC,GAAR,CAAYG,uBAA3B;;AAEA,MAAMC,KAAK,GAAGR,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMS,QAAQ,GAAGT,OAAO,CAAC,WAAD,CAAxB;;AAEA,OAAO,MAAMU,gBAAgB,GAAG,MAAOC,QAAP,IAAoB;EAClD,MAAMC,GAAG,GAAI,gDAAb,CADkD,CAElD;;EACA,OAAOJ,KAAK,CACTK,IADI,CACCD,GADD,EACMD,QADN,EACgB;IACnBG,OAAO,EAAE;MACPC,cAAc,EAAEb,GADT;MAEPc,qBAAqB,EAAEV;IAFhB;EADU,CADhB,EAOJW,IAPI,CAOC,UAAUC,QAAV,EAAoB;IACxB,OAAO;MACLC,OAAO,EAAE,IADJ;MAELC,SAAS,EACP,uCAAuCF,QAAQ,CAACG,IAAT,CAAcC;IAHlD,CAAP;EAKD,CAbI,EAcJC,KAdI,CAcE,UAAUC,KAAV,EAAiB;IACtBC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACA,OAAO;MACLL,OAAO,EAAE,KADJ;MAELQ,OAAO,EAAEH,KAAK,CAACG;IAFV,CAAP;EAID,CApBI,CAAP;AAqBD,CAxBM;AA0BP,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,IAAP,IAAgB;EAC9C,MAAMjB,GAAG,GAAI,gDAAb,CAD8C,CAE9C;;EAEA,IAAIS,IAAI,GAAG,IAAIZ,QAAJ,EAAX;EACAY,IAAI,CAACS,MAAL,CAAY,MAAZ,EAAoBD,IAApB;EAEA,MAAME,QAAQ,GAAGC,IAAI,CAACC,SAAL,CAAe;IAC9BC,IAAI,EAAE,UADwB;IAE9BC,SAAS,EAAE;MACTC,UAAU,EAAE;IADH;EAFmB,CAAf,CAAjB;EAMAf,IAAI,CAACS,MAAL,CAAY,gBAAZ,EAA8BC,QAA9B,EAb8C,CAe9C;;EACA,MAAMM,aAAa,GAAGL,IAAI,CAACC,SAAL,CAAe;IACnCK,UAAU,EAAE,CADuB;IAEnCC,eAAe,EAAE;MACfC,OAAO,EAAE,CACP;QACEC,EAAE,EAAE,MADN;QAEEC,uBAAuB,EAAE;MAF3B,CADO,EAKP;QACED,EAAE,EAAE,MADN;QAEEC,uBAAuB,EAAE;MAF3B,CALO;IADM;EAFkB,CAAf,CAAtB;EAeArB,IAAI,CAACS,MAAL,CAAY,eAAZ,EAA6BO,aAA7B;EAEA,OAAO7B,KAAK,CACTK,IADI,CACCD,GADD,EACMS,IADN,EACY;IACfsB,aAAa,EAAE,UADA;IAEf7B,OAAO,EAAE;MACP,gBAAiB,iCAAgCO,IAAI,CAACuB,SAAU,EADzD;MAEP7B,cAAc,EAAEb,GAFT;MAGPc,qBAAqB,EAAEV;IAHhB;EAFM,CADZ,EASJW,IATI,CASC,UAAUC,QAAV,EAAoB;IACxBO,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BR,QAAQ,CAACG,IAAT,CAAcC,QAA5C;IACA,OAAO;MACLH,OAAO,EAAE,IADJ;MAELC,SAAS,EACP,uCAAuCF,QAAQ,CAACG,IAAT,CAAcC;IAHlD,CAAP;EAKD,CAhBI,EAiBJC,KAjBI,CAiBE,UAAUC,KAAV,EAAiB;IACtBC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACA,OAAO;MACLL,OAAO,EAAE,KADJ;MAELQ,OAAO,EAAEH,KAAK,CAACG;IAFV,CAAP;EAID,CAvBI,CAAP;AAwBD,CAzDM"},"metadata":{},"sourceType":"module"}