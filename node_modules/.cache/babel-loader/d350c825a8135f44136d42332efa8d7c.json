{"ast":null,"code":"var _jsxFileName = \"/Users/vanshkapoor/Desktop/NFT_Marketplace/src/components/NFTpage.js\",\n    _s = $RefreshSig$();\n\nimport Navbar from \"./Navbar\";\nimport axie from \"../tile.jpeg\";\nimport { useLocation, useParams } from \"react-router-dom\";\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NFTPage(props) {\n  _s();\n\n  const [data, updateData] = useState({});\n  const [dataFetched, updateDataFetched] = useState(false);\n  const [message, updateMessage] = useState(\"\");\n  const [currAddress, updateCurrAddress] = useState(\"0x\");\n\n  async function getNFTData(tokenId) {\n    const ethers = require(\"ethers\"); //After adding your Hardhat network to your metamask, this code will get providers and signers\n\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const addr = await signer.getAddress(); //Pull the deployed contract instance\n\n    let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer); //create an NFT Token\n\n    const tokenURI = await contract.tokenURI(tokenId);\n    const listedToken = await contract.getListedTokenForId(tokenId);\n    let meta = await axios.get(tokenURI);\n    meta = meta.data;\n    console.log(listedToken);\n    let item = {\n      price: meta.price,\n      tokenId: tokenId,\n      seller: listedToken.seller,\n      owner: listedToken.owner,\n      image: meta.image,\n      name: meta.name,\n      description: meta.description\n    };\n    console.log(item);\n    updateData(item);\n    updateDataFetched(true);\n    console.log(\"address\", addr);\n    updateCurrAddress(addr);\n  }\n\n  async function buyNFT(tokenId) {\n    try {\n      const ethers = require(\"ethers\"); //After adding your Hardhat network to your metamask, this code will get providers and signers\n\n\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner(); //Pull the deployed contract instance\n\n      let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer);\n      const salePrice = ethers.utils.parseUnits(data.price, \"ether\");\n      updateMessage(\"Buying the NFT... Please Wait (Upto 5 mins)\"); //run the executeSale function\n\n      let transaction = await contract.executeSale(tokenId, {\n        value: salePrice\n      });\n      await transaction.wait();\n      alert(\"You successfully bought the NFT!\");\n      updateMessage(\"\");\n    } catch (e) {\n      alert(\"Upload Error\" + e);\n    }\n  }\n\n  const params = useParams();\n  const tokenId = params.tokenId;\n  if (!dataFetched) getNFTData(tokenId);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      \"min-height\": \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex ml-20 mt-20\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: data.image,\n        alt: \"\",\n        className: \"w-2/5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-xl ml-20 space-y-8 text-white shadow-2xl rounded-lg border-2 p-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Name: \", data.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Description: \", data.description]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Price: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"\",\n            children: data.price + \" ETH\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 20\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Owner: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm\",\n            children: data.owner\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 20\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Seller: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm\",\n            children: data.seller\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [currAddress == data.owner || currAddress == data.seller ? /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"enableEthereumButton bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm\",\n            onClick: () => buyNFT(tokenId),\n            children: \"Buy this NFT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-emerald-700\",\n            children: \"You are the owner of this NFT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-green text-center mt-3\",\n            children: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n\n_s(NFTPage, \"tHfbAfnHJAVQy91bdK1UPtClOpY=\", false, function () {\n  return [useParams];\n});\n\n_c = NFTPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"NFTPage\");","map":{"version":3,"names":["Navbar","axie","useLocation","useParams","MarketplaceJSON","axios","useState","NFTPage","props","data","updateData","dataFetched","updateDataFetched","message","updateMessage","currAddress","updateCurrAddress","getNFTData","tokenId","ethers","require","provider","providers","Web3Provider","window","ethereum","signer","getSigner","addr","getAddress","contract","Contract","address","abi","tokenURI","listedToken","getListedTokenForId","meta","get","console","log","item","price","seller","owner","image","name","description","buyNFT","salePrice","utils","parseUnits","transaction","executeSale","value","wait","alert","e","params"],"sources":["/Users/vanshkapoor/Desktop/NFT_Marketplace/src/components/NFTpage.js"],"sourcesContent":["import Navbar from \"./Navbar\";\nimport axie from \"../tile.jpeg\";\nimport { useLocation, useParams } from \"react-router-dom\";\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\n\nexport default function NFTPage(props) {\n  const [data, updateData] = useState({});\n  const [dataFetched, updateDataFetched] = useState(false);\n  const [message, updateMessage] = useState(\"\");\n  const [currAddress, updateCurrAddress] = useState(\"0x\");\n\n  async function getNFTData(tokenId) {\n    const ethers = require(\"ethers\");\n    //After adding your Hardhat network to your metamask, this code will get providers and signers\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const addr = await signer.getAddress();\n    //Pull the deployed contract instance\n    let contract = new ethers.Contract(\n      MarketplaceJSON.address,\n      MarketplaceJSON.abi,\n      signer\n    );\n    //create an NFT Token\n    const tokenURI = await contract.tokenURI(tokenId);\n    const listedToken = await contract.getListedTokenForId(tokenId);\n    let meta = await axios.get(tokenURI);\n    meta = meta.data;\n    console.log(listedToken);\n\n    let item = {\n      price: meta.price,\n      tokenId: tokenId,\n      seller: listedToken.seller,\n      owner: listedToken.owner,\n      image: meta.image,\n      name: meta.name,\n      description: meta.description,\n    };\n    console.log(item);\n    updateData(item);\n    updateDataFetched(true);\n    console.log(\"address\", addr);\n    updateCurrAddress(addr);\n  }\n\n  async function buyNFT(tokenId) {\n    try {\n      const ethers = require(\"ethers\");\n      //After adding your Hardhat network to your metamask, this code will get providers and signers\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      //Pull the deployed contract instance\n      let contract = new ethers.Contract(\n        MarketplaceJSON.address,\n        MarketplaceJSON.abi,\n        signer\n      );\n      const salePrice = ethers.utils.parseUnits(data.price, \"ether\");\n      updateMessage(\"Buying the NFT... Please Wait (Upto 5 mins)\");\n      //run the executeSale function\n      let transaction = await contract.executeSale(tokenId, {\n        value: salePrice,\n      });\n      await transaction.wait();\n\n      alert(\"You successfully bought the NFT!\");\n      updateMessage(\"\");\n    } catch (e) {\n      alert(\"Upload Error\" + e);\n    }\n  }\n\n  const params = useParams();\n  const tokenId = params.tokenId;\n  if (!dataFetched) getNFTData(tokenId);\n\n  return (\n    <div style={{ \"min-height\": \"100vh\" }}>\n      <Navbar></Navbar>\n      <div className=\"flex ml-20 mt-20\">\n        <img src={data.image} alt=\"\" className=\"w-2/5\" />\n        <div className=\"text-xl ml-20 space-y-8 text-white shadow-2xl rounded-lg border-2 p-5\">\n          <div>Name: {data.name}</div>\n          <div>Description: {data.description}</div>\n          <div>\n            Price: <span className=\"\">{data.price + \" ETH\"}</span>\n          </div>\n          <div>\n            Owner: <span className=\"text-sm\">{data.owner}</span>\n          </div>\n          <div>\n            Seller: <span className=\"text-sm\">{data.seller}</span>\n          </div>\n          <div>\n            {currAddress == data.owner || currAddress == data.seller ? (\n              <button\n                className=\"enableEthereumButton bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm\"\n                onClick={() => buyNFT(tokenId)}\n              >\n                Buy this NFT\n              </button>\n            ) : (\n              <div className=\"text-emerald-700\">\n                You are the owner of this NFT\n              </div>\n            )}\n\n            <div className=\"text-green text-center mt-3\">{message}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}