{"ast":null,"code":"var _jsxFileName = \"/Users/vanshkapoor/Desktop/NFT_Marketplace/src/components/Marketplace.js\",\n    _s = $RefreshSig$();\n\nimport Navbar from \"./Navbar\";\nimport NFTTile from \"./NFTTile\";\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Marketplace() {\n  _s();\n\n  const sampleData = [];\n  const [data, updateData] = useState(sampleData);\n  const [dataFetched, updateFetched] = useState(false);\n\n  async function getAllNFTs() {\n    const ethers = require(\"ethers\"); //After adding your Hardhat network to your metamask, this code will get providers and signers\n\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner(); //Pull the deployed contract instance\n\n    let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer); //create an NFT Token\n\n    let transaction = await contract.getAllNFTs(); //Fetch all the details of every NFT from the contract and display\n\n    const items = await Promise.all(transaction.map(async i => {\n      const tokenURI = await contract.tokenURI(i.tokenId);\n      let meta = await axios.get(tokenURI);\n      meta = meta.data;\n      let price = ethers.utils.formatUnits(i.price.toString(), \"ether\");\n      let item = {\n        price,\n        tokenId: i.tokenId.toNumber(),\n        seller: i.seller,\n        owner: i.owner,\n        image: meta.image,\n        name: meta.name,\n        description: meta.description\n      };\n      return item;\n    }));\n    updateFetched(true);\n    updateData(items);\n  }\n\n  if (!dataFetched) getAllNFTs();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex flex-col place-items-center mt-20\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"md:text-xl font-bold text-white\",\n        children: \"Top NFTs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex mt-5 justify-between flex-wrap max-w-screen-xl text-center\",\n        children: data.map((value, index) => {\n          return /*#__PURE__*/_jsxDEV(NFTTile, {\n            data: value\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 20\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Marketplace, \"eoOZIC3fpxTnVeH+5XYnEv0RFm0=\");\n\n_c = Marketplace;\n\nvar _c;\n\n$RefreshReg$(_c, \"Marketplace\");","map":{"version":3,"names":["Navbar","NFTTile","MarketplaceJSON","axios","useState","Marketplace","sampleData","data","updateData","dataFetched","updateFetched","getAllNFTs","ethers","require","provider","providers","Web3Provider","window","ethereum","signer","getSigner","contract","Contract","address","abi","transaction","items","Promise","all","map","i","tokenURI","tokenId","meta","get","price","utils","formatUnits","toString","item","toNumber","seller","owner","image","name","description","value","index"],"sources":["/Users/vanshkapoor/Desktop/NFT_Marketplace/src/components/Marketplace.js"],"sourcesContent":["import Navbar from \"./Navbar\";\nimport NFTTile from \"./NFTTile\";\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\n\nexport default function Marketplace() {\n  const sampleData = [\n    \n  ];\n  const [data, updateData] = useState(sampleData);\n  const [dataFetched, updateFetched] = useState(false);\n\n  async function getAllNFTs() {\n    const ethers = require(\"ethers\");\n    //After adding your Hardhat network to your metamask, this code will get providers and signers\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    //Pull the deployed contract instance\n    let contract = new ethers.Contract(\n      MarketplaceJSON.address,\n      MarketplaceJSON.abi,\n      signer\n    );\n    //create an NFT Token\n    let transaction = await contract.getAllNFTs();\n\n    //Fetch all the details of every NFT from the contract and display\n    const items = await Promise.all(\n      transaction.map(async (i) => {\n        const tokenURI = await contract.tokenURI(i.tokenId);\n        let meta = await axios.get(tokenURI);\n        meta = meta.data;\n\n        let price = ethers.utils.formatUnits(i.price.toString(), \"ether\");\n        let item = {\n          price,\n          tokenId: i.tokenId.toNumber(),\n          seller: i.seller,\n          owner: i.owner,\n          image: meta.image,\n          name: meta.name,\n          description: meta.description,\n        };\n        return item;\n      })\n    );\n\n    updateFetched(true);\n    updateData(items);\n  }\n\n  if (!dataFetched) getAllNFTs();\n\n  return (\n    <div>\n      <Navbar></Navbar>\n      <div className=\"flex flex-col place-items-center mt-20\">\n        <div className=\"md:text-xl font-bold text-white\">Top NFTs</div>\n        <div className=\"flex mt-5 justify-between flex-wrap max-w-screen-xl text-center\">\n          {data.map((value, index) => {\n            return <NFTTile data={value} key={index}></NFTTile>;\n          })}\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":";;;AAAA,OAAOA,MAAP,MAAmB,UAAnB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,eAAP,MAA4B,qBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAEA,eAAe,SAASC,WAAT,GAAuB;EAAA;;EACpC,MAAMC,UAAU,GAAG,EAAnB;EAGA,MAAM,CAACC,IAAD,EAAOC,UAAP,IAAqBJ,QAAQ,CAACE,UAAD,CAAnC;EACA,MAAM,CAACG,WAAD,EAAcC,aAAd,IAA+BN,QAAQ,CAAC,KAAD,CAA7C;;EAEA,eAAeO,UAAf,GAA4B;IAC1B,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB,CAD0B,CAE1B;;;IACA,MAAMC,QAAQ,GAAG,IAAIF,MAAM,CAACG,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,CAAjB;IACA,MAAMC,MAAM,GAAGL,QAAQ,CAACM,SAAT,EAAf,CAJ0B,CAK1B;;IACA,IAAIC,QAAQ,GAAG,IAAIT,MAAM,CAACU,QAAX,CACbpB,eAAe,CAACqB,OADH,EAEbrB,eAAe,CAACsB,GAFH,EAGbL,MAHa,CAAf,CAN0B,CAW1B;;IACA,IAAIM,WAAW,GAAG,MAAMJ,QAAQ,CAACV,UAAT,EAAxB,CAZ0B,CAc1B;;IACA,MAAMe,KAAK,GAAG,MAAMC,OAAO,CAACC,GAAR,CAClBH,WAAW,CAACI,GAAZ,CAAgB,MAAOC,CAAP,IAAa;MAC3B,MAAMC,QAAQ,GAAG,MAAMV,QAAQ,CAACU,QAAT,CAAkBD,CAAC,CAACE,OAApB,CAAvB;MACA,IAAIC,IAAI,GAAG,MAAM9B,KAAK,CAAC+B,GAAN,CAAUH,QAAV,CAAjB;MACAE,IAAI,GAAGA,IAAI,CAAC1B,IAAZ;MAEA,IAAI4B,KAAK,GAAGvB,MAAM,CAACwB,KAAP,CAAaC,WAAb,CAAyBP,CAAC,CAACK,KAAF,CAAQG,QAAR,EAAzB,EAA6C,OAA7C,CAAZ;MACA,IAAIC,IAAI,GAAG;QACTJ,KADS;QAETH,OAAO,EAAEF,CAAC,CAACE,OAAF,CAAUQ,QAAV,EAFA;QAGTC,MAAM,EAAEX,CAAC,CAACW,MAHD;QAITC,KAAK,EAAEZ,CAAC,CAACY,KAJA;QAKTC,KAAK,EAAEV,IAAI,CAACU,KALH;QAMTC,IAAI,EAAEX,IAAI,CAACW,IANF;QAOTC,WAAW,EAAEZ,IAAI,CAACY;MAPT,CAAX;MASA,OAAON,IAAP;IACD,CAhBD,CADkB,CAApB;IAoBA7B,aAAa,CAAC,IAAD,CAAb;IACAF,UAAU,CAACkB,KAAD,CAAV;EACD;;EAED,IAAI,CAACjB,WAAL,EAAkBE,UAAU;EAE5B,oBACE;IAAA,wBACE,QAAC,MAAD;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAK,SAAS,EAAC,wCAAf;MAAA,wBACE;QAAK,SAAS,EAAC,iCAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QAAK,SAAS,EAAC,iEAAf;QAAA,UACGJ,IAAI,CAACsB,GAAL,CAAS,CAACiB,KAAD,EAAQC,KAAR,KAAkB;UAC1B,oBAAO,QAAC,OAAD;YAAS,IAAI,EAAED;UAAf,GAA2BC,KAA3B;YAAA;YAAA;YAAA;UAAA,QAAP;QACD,CAFA;MADH;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAaD;;GA7DuB1C,W;;KAAAA,W"},"metadata":{},"sourceType":"module"}