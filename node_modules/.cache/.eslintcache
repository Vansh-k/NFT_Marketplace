[{"/Users/vanshkapoor/Desktop/NFT_Marketplace/src/index.js":"1","/Users/vanshkapoor/Desktop/NFT_Marketplace/src/App.js":"2","/Users/vanshkapoor/Desktop/NFT_Marketplace/src/reportWebVitals.js":"3","/Users/vanshkapoor/Desktop/NFT_Marketplace/src/components/SellNFT.js":"4","/Users/vanshkapoor/Desktop/NFT_Marketplace/src/components/NFTpage.js":"5","/Users/vanshkapoor/Desktop/NFT_Marketplace/src/components/Marketplace.js":"6","/Users/vanshkapoor/Desktop/NFT_Marketplace/src/components/Profile.js":"7","/Users/vanshkapoor/Desktop/NFT_Marketplace/src/components/Navbar.js":"8","/Users/vanshkapoor/Desktop/NFT_Marketplace/src/pinata.js":"9","/Users/vanshkapoor/Desktop/NFT_Marketplace/src/components/NFTTile.js":"10"},{"size":1087,"mtime":1655052038000,"results":"11","hashOfConfig":"12"},{"size":743,"mtime":1655052038000,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1655052038000,"results":"14","hashOfConfig":"12"},{"size":6042,"mtime":1662284733353,"results":"15","hashOfConfig":"12"},{"size":3923,"mtime":1662284668958,"results":"16","hashOfConfig":"12"},{"size":2027,"mtime":1662285331834,"results":"17","hashOfConfig":"12"},{"size":3395,"mtime":1662284714175,"results":"18","hashOfConfig":"12"},{"size":4216,"mtime":1662285873308,"results":"19","hashOfConfig":"12"},{"size":2216,"mtime":1662282917183,"results":"20","hashOfConfig":"12"},{"size":791,"mtime":1662284648494,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},"1fug23f",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"37"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"37"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/vanshkapoor/Desktop/NFT_Marketplace/src/index.js",["58"],[],"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {\n  BrowserRouter,\n  Routes,\n  Route,\n} from \"react-router-dom\";\nimport SellNFT from './components/SellNFT';\nimport Marketplace from './components/Marketplace';\nimport Profile from './components/Profile';\nimport NFTPage from './components/NFTpage';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={<Marketplace />}/>\n        <Route path=\"/sellNFT\" element={<SellNFT />}/> \n        <Route path=\"/nftPage/:tokenId\" element={<NFTPage />}/>        \n        <Route path=\"/profile\" element={<Profile />}/> \n      </Routes>\n    </BrowserRouter>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/Users/vanshkapoor/Desktop/NFT_Marketplace/src/App.js",["59","60","61"],[],"import './App.css';\nimport Navbar from './components/Navbar.js';\nimport Marketplace from './components/Marketplace';\nimport Profile from './components/Profile';\nimport SellNFT from './components/SellNFT';\nimport NFTPage from './components/NFTpage';\nimport ReactDOM from \"react-dom/client\";\nimport {\n  BrowserRouter,\n  Routes,\n  Route,\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n        <Routes>\n          <Route path=\"/\" element={<Marketplace />}/>\n          <Route path=\"/nftPage\" element={<NFTPage />}/>        \n          <Route path=\"/profile\" element={<Profile />}/>\n          <Route path=\"/sellNFT\" element={<SellNFT />}/>             \n        </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/vanshkapoor/Desktop/NFT_Marketplace/src/reportWebVitals.js",[],[],"/Users/vanshkapoor/Desktop/NFT_Marketplace/src/components/SellNFT.js",["62"],[],"import Navbar from \"./Navbar\";\nimport { useState } from \"react\";\nimport { uploadFileToIPFS, uploadJSONToIPFS } from \"../pinata\";\nimport Marketplace from \"../Marketplace.json\";\nimport { useLocation } from \"react-router\";\n\nexport default function SellNFT() {\n  const [formParams, updateFormParams] = useState({\n    name: \"\",\n    description: \"\",\n    price: \"\",\n  });\n  const [fileURL, setFileURL] = useState(null);\n  const ethers = require(\"ethers\");\n  const [message, updateMessage] = useState(\"\");\n  const location = useLocation();\n\n  //This function uploads the NFT image to IPFS\n  async function OnChangeFile(e) {\n    var file = e.target.files[0];\n    //check for file extension\n    try {\n      //upload the file to IPFS\n      const response = await uploadFileToIPFS(file);\n      if (response.success === true) {\n        console.log(\"Uploaded image to Pinata: \", response.pinataURL);\n        setFileURL(response.pinataURL);\n      }\n    } catch (e) {\n      console.log(\"Error during file upload\", e);\n    }\n  }\n\n  //This function uploads the metadata to IPFS\n  async function uploadMetadataToIPFS() {\n    const { name, description, price } = formParams;\n    //Make sure that none of the fields are empty\n    if (!name || !description || !price || !fileURL) return;\n\n    const nftJSON = {\n      name,\n      description,\n      price,\n      image: fileURL,\n    };\n\n    try {\n      //upload the metadata JSON to IPFS\n      const response = await uploadJSONToIPFS(nftJSON);\n      if (response.success === true) {\n        console.log(\"Uploaded JSON to Pinata: \", response);\n        return response.pinataURL;\n      }\n    } catch (e) {\n      console.log(\"error uploading JSON metadata:\", e);\n    }\n  }\n\n  async function listNFT(e) {\n    e.preventDefault();\n\n    //Upload data to IPFS\n    try {\n      const metadataURL = await uploadMetadataToIPFS();\n      //After adding your Hardhat network to your metamask, this code will get providers and signers\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      updateMessage(\"Please wait.. uploading (upto 5 mins)\");\n\n      //Pull the deployed contract instance\n      let contract = new ethers.Contract(\n        Marketplace.address,\n        Marketplace.abi,\n        signer\n      );\n\n      //massage the params to be sent to the create NFT request\n      const price = ethers.utils.parseUnits(formParams.price, \"ether\");\n      let listingPrice = await contract.getListPrice();\n      listingPrice = listingPrice.toString();\n\n      //actually create the NFT\n      let transaction = await contract.createToken(metadataURL, price, {\n        value: listingPrice,\n      });\n      await transaction.wait();\n\n      alert(\"Successfully listed your NFT!\");\n      updateMessage(\"\");\n      updateFormParams({ name: \"\", description: \"\", price: \"\" });\n      window.location.replace(\"/\");\n    } catch (e) {\n      alert(\"Upload error\" + e);\n    }\n  }\n\n  console.log(\"Working\", process.env);\n  return (\n    <div className=\"\">\n      <Navbar></Navbar>\n      <div className=\"flex flex-col place-items-center mt-10\" id=\"nftForm\">\n        <form className=\"bg-white shadow-md rounded px-8 pt-4 pb-8 mb-4\">\n          <h3 className=\"text-center font-bold text-purple-500 mb-8\">\n            Upload your NFT to the marketplace\n          </h3>\n          <div className=\"mb-4\">\n            <label\n              className=\"block text-purple-500 text-sm font-bold mb-2\"\n              htmlFor=\"name\"\n            >\n              NFT Name\n            </label>\n            <input\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              id=\"name\"\n              type=\"text\"\n              placeholder=\"Axie#4563\"\n              onChange={(e) =>\n                updateFormParams({ ...formParams, name: e.target.value })\n              }\n              value={formParams.name}\n            ></input>\n          </div>\n          <div className=\"mb-6\">\n            <label\n              className=\"block text-purple-500 text-sm font-bold mb-2\"\n              htmlFor=\"description\"\n            >\n              NFT Description\n            </label>\n            <textarea\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              cols=\"40\"\n              rows=\"5\"\n              id=\"description\"\n              type=\"text\"\n              placeholder=\"Axie Infinity Collection\"\n              value={formParams.description}\n              onChange={(e) =>\n                updateFormParams({ ...formParams, description: e.target.value })\n              }\n            ></textarea>\n          </div>\n          <div className=\"mb-6\">\n            <label\n              className=\"block text-purple-500 text-sm font-bold mb-2\"\n              htmlFor=\"price\"\n            >\n              Price (in ETH)\n            </label>\n            <input\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              type=\"number\"\n              placeholder=\"Min 0.01 ETH\"\n              step=\"0.01\"\n              value={formParams.price}\n              onChange={(e) =>\n                updateFormParams({ ...formParams, price: e.target.value })\n              }\n            ></input>\n          </div>\n          <div>\n            <label\n              className=\"block text-purple-500 text-sm font-bold mb-2\"\n              htmlFor=\"image\"\n            >\n              Upload Image\n            </label>\n            <input type={\"file\"} onChange={OnChangeFile}></input>\n          </div>\n          <br></br>\n          <div className=\"text-green text-center\">{message}</div>\n          <button\n            onClick={listNFT}\n            className=\"font-bold mt-10 w-full bg-purple-500 text-white rounded p-2 shadow-lg\"\n          >\n            List NFT\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n",[],"/Users/vanshkapoor/Desktop/NFT_Marketplace/src/components/NFTpage.js",["63","64","65","66"],[],"import Navbar from \"./Navbar\";\nimport axie from \"../tile.jpeg\";\nimport { useLocation, useParams } from \"react-router-dom\";\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\n\nexport default function NFTPage(props) {\n  const [data, updateData] = useState({});\n  const [dataFetched, updateDataFetched] = useState(false);\n  const [message, updateMessage] = useState(\"\");\n  const [currAddress, updateCurrAddress] = useState(\"0x\");\n\n  async function getNFTData(tokenId) {\n    const ethers = require(\"ethers\");\n    //After adding your Hardhat network to your metamask, this code will get providers and signers\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const addr = await signer.getAddress();\n    //Pull the deployed contract instance\n    let contract = new ethers.Contract(\n      MarketplaceJSON.address,\n      MarketplaceJSON.abi,\n      signer\n    );\n    //create an NFT Token\n    const tokenURI = await contract.tokenURI(tokenId);\n    const listedToken = await contract.getListedTokenForId(tokenId);\n    let meta = await axios.get(tokenURI);\n    meta = meta.data;\n    console.log(listedToken);\n\n    let item = {\n      price: meta.price,\n      tokenId: tokenId,\n      seller: listedToken.seller,\n      owner: listedToken.owner,\n      image: meta.image,\n      name: meta.name,\n      description: meta.description,\n    };\n    console.log(item);\n    updateData(item);\n    updateDataFetched(true);\n    console.log(\"address\", addr);\n    updateCurrAddress(addr);\n  }\n\n  async function buyNFT(tokenId) {\n    try {\n      const ethers = require(\"ethers\");\n      //After adding your Hardhat network to your metamask, this code will get providers and signers\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      //Pull the deployed contract instance\n      let contract = new ethers.Contract(\n        MarketplaceJSON.address,\n        MarketplaceJSON.abi,\n        signer\n      );\n      const salePrice = ethers.utils.parseUnits(data.price, \"ether\");\n      updateMessage(\"Buying the NFT... Please Wait (Upto 5 mins)\");\n      //run the executeSale function\n      let transaction = await contract.executeSale(tokenId, {\n        value: salePrice,\n      });\n      await transaction.wait();\n\n      alert(\"You successfully bought the NFT!\");\n      updateMessage(\"\");\n    } catch (e) {\n      alert(\"Upload Error\" + e);\n    }\n  }\n\n  const params = useParams();\n  const tokenId = params.tokenId;\n  if (!dataFetched) getNFTData(tokenId);\n\n  return (\n    <div style={{ \"min-height\": \"100vh\" }}>\n      <Navbar></Navbar>\n      <div className=\"flex ml-20 mt-20\">\n        <img src={data.image} alt=\"\" className=\"w-2/5\" />\n        <div className=\"text-xl ml-20 space-y-8 text-white shadow-2xl rounded-lg border-2 p-5\">\n          <div>Name: {data.name}</div>\n          <div>Description: {data.description}</div>\n          <div>\n            Price: <span className=\"\">{data.price + \" ETH\"}</span>\n          </div>\n          <div>\n            Owner: <span className=\"text-sm\">{data.owner}</span>\n          </div>\n          <div>\n            Seller: <span className=\"text-sm\">{data.seller}</span>\n          </div>\n          <div>\n            {currAddress == data.owner || currAddress == data.seller ? (\n              <button\n                className=\"enableEthereumButton bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm\"\n                onClick={() => buyNFT(tokenId)}\n              >\n                Buy this NFT\n              </button>\n            ) : (\n              <div className=\"text-emerald-700\">\n                You are the owner of this NFT\n              </div>\n            )}\n\n            <div className=\"text-green text-center mt-3\">{message}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/Users/vanshkapoor/Desktop/NFT_Marketplace/src/components/Marketplace.js",[],[],"/Users/vanshkapoor/Desktop/NFT_Marketplace/src/components/Profile.js",["67","68"],[],"import Navbar from \"./Navbar\";\nimport { useLocation, useParams } from \"react-router-dom\";\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport NFTTile from \"./NFTTile\";\n\nexport default function Profile() {\n  const [data, updateData] = useState([]);\n  const [dataFetched, updateFetched] = useState(false);\n  const [address, updateAddress] = useState(\"0x\");\n  const [totalPrice, updateTotalPrice] = useState(\"0\");\n\n  async function getNFTData(tokenId) {\n    const ethers = require(\"ethers\");\n    let sumPrice = 0;\n    //After adding your Hardhat network to your metamask, this code will get providers and signers\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const addr = await signer.getAddress();\n\n    //Pull the deployed contract instance\n    let contract = new ethers.Contract(\n      MarketplaceJSON.address,\n      MarketplaceJSON.abi,\n      signer\n    );\n\n    //create an NFT Token\n    let transaction = await contract.getMyNFTs();\n\n    /*\n     * Below function takes the metadata from tokenURI and the data returned by getMyNFTs() contract function\n     * and creates an object of information that is to be displayed\n     */\n\n    const items = await Promise.all(\n      transaction.map(async (i) => {\n        const tokenURI = await contract.tokenURI(i.tokenId);\n        let meta = await axios.get(tokenURI);\n        meta = meta.data;\n\n        let price = ethers.utils.formatUnits(i.price.toString(), \"ether\");\n        let item = {\n          price,\n          tokenId: i.tokenId.toNumber(),\n          seller: i.seller,\n          owner: i.owner,\n          image: meta.image,\n          name: meta.name,\n          description: meta.description,\n        };\n        sumPrice += Number(price);\n        return item;\n      })\n    );\n\n    updateData(items);\n    updateFetched(true);\n    updateAddress(addr);\n    updateTotalPrice(sumPrice.toPrecision(3));\n  }\n\n  const params = useParams();\n  const tokenId = params.tokenId;\n  if (!dataFetched) getNFTData(tokenId);\n\n  return (\n    <div className=\"profileClass\" style={{ \"min-height\": \"100vh\" }}>\n      <Navbar></Navbar>\n      <div className=\"profileClass\">\n        <div className=\"flex text-center flex-col mt-11 md:text-2xl text-white\">\n          <div className=\"mb-5\">\n            <h2 className=\"font-bold\">Wallet Address</h2>\n            {address}\n          </div>\n        </div>\n        <div className=\"flex flex-row text-center justify-center mt-10 md:text-2xl text-white\">\n          <div>\n            <h2 className=\"font-bold\">No. of NFTs</h2>\n            {data.length}\n          </div>\n          <div className=\"ml-20\">\n            <h2 className=\"font-bold\">Total Value</h2>\n            {totalPrice} ETH\n          </div>\n        </div>\n        <div className=\"flex flex-col text-center items-center mt-11 text-white\">\n          <h2 className=\"font-bold\">Your NFTs</h2>\n          <div className=\"flex justify-center flex-wrap max-w-screen-xl\">\n            {data.map((value, index) => {\n              return <NFTTile data={value} key={index}></NFTTile>;\n            })}\n          </div>\n          <div className=\"mt-10 text-xl\">\n            {data.length == 0\n              ? \"Oops, No NFT data to display (Are you logged in?)\"\n              : \"\"}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/Users/vanshkapoor/Desktop/NFT_Marketplace/src/components/Navbar.js",["69","70","71","72","73","74"],[],"/Users/vanshkapoor/Desktop/NFT_Marketplace/src/pinata.js",[],[],"/Users/vanshkapoor/Desktop/NFT_Marketplace/src/components/NFTTile.js",["75","76"],[],{"ruleId":"77","severity":1,"message":"78","line":4,"column":8,"nodeType":"79","messageId":"80","endLine":4,"endColumn":11},{"ruleId":"77","severity":1,"message":"81","line":2,"column":8,"nodeType":"79","messageId":"80","endLine":2,"endColumn":14},{"ruleId":"77","severity":1,"message":"82","line":7,"column":8,"nodeType":"79","messageId":"80","endLine":7,"endColumn":16},{"ruleId":"77","severity":1,"message":"83","line":9,"column":3,"nodeType":"79","messageId":"80","endLine":9,"endColumn":16},{"ruleId":"77","severity":1,"message":"84","line":16,"column":9,"nodeType":"79","messageId":"80","endLine":16,"endColumn":17},{"ruleId":"77","severity":1,"message":"85","line":2,"column":8,"nodeType":"79","messageId":"80","endLine":2,"endColumn":12},{"ruleId":"77","severity":1,"message":"86","line":3,"column":10,"nodeType":"79","messageId":"80","endLine":3,"endColumn":21},{"ruleId":"87","severity":1,"message":"88","line":99,"column":26,"nodeType":"89","messageId":"90","endLine":99,"endColumn":28},{"ruleId":"87","severity":1,"message":"88","line":99,"column":55,"nodeType":"89","messageId":"90","endLine":99,"endColumn":57},{"ruleId":"77","severity":1,"message":"86","line":2,"column":10,"nodeType":"79","messageId":"80","endLine":2,"endColumn":21},{"ruleId":"87","severity":1,"message":"88","line":96,"column":26,"nodeType":"89","messageId":"90","endLine":96,"endColumn":28},{"ruleId":"77","severity":1,"message":"91","line":2,"column":20,"nodeType":"79","messageId":"80","endLine":2,"endColumn":26},{"ruleId":"77","severity":1,"message":"92","line":3,"column":3,"nodeType":"79","messageId":"80","endLine":3,"endColumn":9},{"ruleId":"77","severity":1,"message":"93","line":4,"column":3,"nodeType":"79","messageId":"80","endLine":4,"endColumn":8},{"ruleId":"77","severity":1,"message":"94","line":6,"column":3,"nodeType":"79","messageId":"80","endLine":6,"endColumn":16},{"ruleId":"77","severity":1,"message":"95","line":7,"column":3,"nodeType":"79","messageId":"80","endLine":7,"endColumn":12},{"ruleId":"96","severity":1,"message":"97","line":53,"column":3,"nodeType":"79","endLine":53,"endColumn":12,"suggestions":"98"},{"ruleId":"77","severity":1,"message":"85","line":1,"column":8,"nodeType":"79","messageId":"80","endLine":1,"endColumn":12},{"ruleId":"77","severity":1,"message":"91","line":2,"column":27,"nodeType":"79","messageId":"80","endLine":2,"endColumn":33},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","'Navbar' is defined but never used.","'ReactDOM' is defined but never used.","'BrowserRouter' is defined but never used.","'location' is assigned a value but never used.","'axie' is defined but never used.","'useLocation' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'useRouteMatch' is defined but never used.","'useParams' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'toggleConnect'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [location.pathname] as a second argument to the useEffect Hook.",["99"],{"desc":"100","fix":"101"},"Add dependencies array: [location.pathname]",{"range":"102","text":"103"},[1904,1904],", [location.pathname]"]